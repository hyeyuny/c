<정리>
  시스템 소프트웨어란 컴퓨터를 처음 켰을 때의 모든 작업들을 제어하게 되며, 사용자가 소프트웨어를 사용할 경우에 사용자의 작업 지시를 컴퓨터에 전달해 주는 역할을 수행하는 운영체제라고 한다. 크게 시스템 운영, 시스템 지원, 시스템 개발 세 가지로 나뉜다. 시스템 운영 소프트웨어는 컴퓨터 하드웨어 자원을 효율적으로 관리하고, 다양한 응용 프로그램이 정상적으로 실행되도록 지원한다. 시스템 지원 소프트웨어는 시스템 운영을 보완하고, 시스템의 원활한 작동을 지원한다. 시스템 개발 소프트웨어는 새로운 시스템을 설계, 개발 및 구축하는 데 사용된다.

  원시언어로 된 프로그램이 컴퓨터에서 수행되기 위해서는 컴퓨터가 직접 이해할 수 있는 목적언어로 바꾸어 주어야 하는데, 이를 컴파일러라고 한다.
  소프트웨어 개발 프로그램에서 다수의 오브젝트 파일 및 라이브러리 파일들을 모아 하나의 통합된 실행 파일로 만들어주는 소프트웨어를 링커라고 한다.

<토의 및 질의응답>
1.	시스템 소프트웨어는 어떻게 시스템의 안정성과 성능을 향상시키는가?
  A.	시스템 운영 소프트웨어를 통해 하드웨어 자원을 효율족으로 관리하고, 성능을 모니터링하고 최적화하여 부하 분산, 캐싱, 스케줄링 알고리즘 등을 사용하여 시스템 성능을 향상시킨다. 또한 시스템 장애 시 복구를 지원하고 백업 및 복원 프로세스를 관리하여 데이터 손실을 최소화한다.
   
2.	우리는 프로그래밍이 실행되는 과정에서 의문점이 들었다. 컴파일러를 통해 생성된 파일은 링킹을 통해 생성된 파일보다 효율이 떨어지는가?
  A.	일반적으로 컴파일러를 통해 생성된 오브젝트 파일은 링킹을 통해 생성된 실행 파일보다 효율적이다. 링커의 주요 역할은 여러 오브젝트 파일을 결합하고 상호 의존성을 해결하는 것이다. 컴파일러는 원시언어를 목적언어로 변환하는 것이며, 이 떄 최적화를 수행한다. 최적화 과정은 코드의 실행 속도와 메모리 사용량을 최적화하여 보다 효율적인 코드를 생성하는 것을 목표로 한다. 반면 링커의 주요 역할은 여러 오브젝트 파일을 결합하고 상호의존성을 해결하는 것이다. 주로 실행 파일의 구조를 조립하고 심볼 해결을 수행하며, 코드 최적화에 중점을 두지는 않는다. 단순히 코드와 데이터를 합치는 역할을 하기 때문에 컴파일러의 최적화 수준을 따라잡지는 못한다. 따라서 컴파일러를 통해 생성된 오브젝트 파일은 이미 최적화된 코드를 포함하고 있으므로, 링킹을 통해 생성된 파일보다는 일반적으로 효율적이다
  
3.	질문 2에서 컴파일러를 통해 생성된 오브젝트 파일이 일반적으로 효율적이라고 하였는데, 그럼 왜 굳이 링킹을 통해 실행 파일을 생성하는가?
  A.	실행 파일은 컴퓨터가 직접 실행할 수 있는 형식으로 구성되어야 하는데, 링킹은 오브젝트 파일 간의 상호 의존성을 해결하고, 실행 파일에 대한 최종적인 구성을 만든다. 이 과정에서 오브젝트 파일의 주소 해석, 코드의 배치 등이 이루어진다. 링킹은 여러 오브젝트 파일과 라이브러리를 효율적으로 결합하여 실행 파일을 생성하는 중요한 단계로, 이 단계를 통해 프로그램이 완전하고 동작 가능한 형태로 구성되기 때문에 링킹을 통해 실행 파일을 생성하는 과정을 거쳐야 한다.
